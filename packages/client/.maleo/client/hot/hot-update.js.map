{"version":3,"file":"hot/hot-update.js","sources":["webpack://[name]/./gql-withgql.js"],"sourcesContent":["import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\n\nimport GraphQLClientContext from './gql-context';\n\nexport const withClient = options => ComposedComponent => {\n  const { query = '', variables = {} } = options;\n  const key = ComposedComponent.name;\n\n  class GQLHoC extends React.Component {\n    static contextType = GraphQLClientContext;\n\n    refetch = (k = key) => this.context.setRefetch(k, true);\n    doneRefetch = (k = key) => this.context.setRefetch(k, false);\n\n    state = {\n      data: null,\n      loading: true,\n      errors: null,\n      refetch: this.refetch,\n      mutation: null,\n    };\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.context.client.appendQuery(key, {\n        query,\n        variables,\n      });\n    }\n\n    componentDidMount() {\n      this.query(this.context.client.queries[key]);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      const isRefetch = nextContext.refetches[key];\n\n      if (isRefetch) {\n        this.query(this.context.client.queries[key]);\n        this.doneRefetch();\n      }\n    }\n\n    query = ({ query, variables }) => {\n      this.context.client\n        .query({ query, variables })\n        .then(result =>\n          this.setState({\n            data: result.data.data,\n            errors: result.data.errors || null,\n            loading: false,\n          }),\n        )\n        .catch(error =>\n          this.setState({\n            errors: [error],\n            loading: false,\n          }),\n        );\n    };\n\n    mutate = ({ mutation, variables, refetch = false }) => {\n      this.context.client\n        .mutate({ mutation, variables })\n        .then(result => {\n          this.setState(\n            {\n              mutation: {\n                data: result.data.data,\n                errors: result.data.errors || null,\n                loading: false,\n              },\n            },\n            () => {\n              if (typeof refetch === 'boolean') {\n                refetch && this.refetch();\n              }\n\n              if (typeof refetch === 'string') {\n                this.refetch(refetch);\n              }\n            },\n          );\n        })\n        .catch(error =>\n          this.setState({\n            mutation: {\n              errors: [error],\n              loading: false,\n            },\n          }),\n        );\n    };\n\n    render() {\n      return (\n        <ComposedComponent\n          {...this.props}\n          graphql={this.state}\n          refetch={this.refetch}\n          mutate={this.mutate}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(GQLHoC, ComposedComponent);\n};\n\nexport default withClient;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAXA;AAAA;AAAA;AACA;AAUA;AAVA;AAAA;AAAA;AACA;AASA;AAPA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAsBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AADA;AAOA;AAEA;AACA;AAFA;AADA;AAMA;AACA;AAvCA;AAwCA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AADA;AADA;AAQA;AACA;AArEA;AACA;AACA;AAFA;AACA;AAJA;AAOA;AACA;AA1BA;AAAA;AAAA;AA4BA;AACA;AA7BA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;AAAA;AA4FA;AAGA;AACA;AACA;AAJA;AAOA;AApGA;AACA;AADA;AAAA;AACA;AAGA;AAmGA;AACA;AAxGA;AA0GA;;;;A","sourceRoot":""}