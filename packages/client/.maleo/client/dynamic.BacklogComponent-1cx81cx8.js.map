{"version":3,"file":"dynamic.BacklogComponent-1cx81cx8.js","sources":["webpack://[name]/./gql-context.js","webpack://[name]/./gql-withgql.js","webpack://[name]/./src/BacklogComponent.jsx","webpack://[name]/./src/TodoList.jsx"],"sourcesContent":["import { createContext } from 'react';\n\nconst GraphQLClientContext = createContext();\n\nexport default GraphQLClientContext;\n","import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\n\nimport GraphQLClientContext from './gql-context';\n\nexport const withClient = options => ComposedComponent => {\n  const { query = '', variables = {} } = options;\n  const key = ComposedComponent.name;\n\n  class GQLHoC extends React.Component {\n    static contextType = GraphQLClientContext;\n\n    refetch = (k = key) => this.context.setRefetch(k, true);\n    doneRefetch = (k = key) => this.context.setRefetch(k, false);\n\n    state = {\n      data: null,\n      loading: true,\n      errors: null,\n      refetch: this.refetch,\n      mutation: null,\n    };\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.context.client.appendQuery(key, {\n        query,\n        variables,\n      });\n    }\n\n    componentDidMount() {\n      this.query(this.context.client.queries[key]);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      const isRefetch = nextContext.refetches[key];\n\n      if (isRefetch) {\n        this.query(this.context.client.queries[key]);\n        this.doneRefetch();\n      }\n    }\n\n    query = ({ query, variables }) => {\n      this.context.client\n        .query({ query, variables })\n        .then(result =>\n          this.setState({\n            data: result.data.data,\n            errors: result.data.errors || null,\n            loading: false,\n          }),\n        )\n        .catch(error =>\n          this.setState({\n            errors: [error],\n            loading: false,\n          }),\n        );\n    };\n\n    mutate = ({ mutation, variables, refetch = false }) => {\n      this.context.client\n        .mutate({ mutation, variables })\n        .then(result => {\n          this.setState(\n            {\n              mutation: {\n                data: result.data.data,\n                errors: result.data.errors || null,\n                loading: false,\n              },\n            },\n            () => {\n              if (typeof refetch === 'boolean') {\n                refetch && this.refetch();\n              }\n\n              if (typeof refetch === 'string') {\n                this.refetch(refetch);\n              }\n            },\n          );\n        })\n        .catch(error =>\n          this.setState({\n            mutation: {\n              errors: [error],\n              loading: false,\n            },\n          }),\n        );\n    };\n\n    render() {\n      return (\n        <ComposedComponent\n          {...this.props}\n          graphql={this.state}\n          refetch={this.refetch}\n          mutate={this.mutate}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(GQLHoC, ComposedComponent);\n};\n\nexport default withClient;\n","import React from 'react';\n\nimport TodoList from './TodoList';\n\nimport withClient from '../gql-withgql';\n\nconst style = {\n  wrap: {\n    width: '100%',\n  },\n  list: {\n    padding: 0,\n    margin: 5,\n    padding: 5,\n    textAlign: 'center',\n    border: '1px solid black',\n  },\n  formWrap: {\n    width: '98%',\n    border: '1px solid black',\n    margin: 5,\n    padding: 5,\n    textAlign: 'center',\n  },\n  input: {\n    margin: 5,\n  },\n};\n\nexport class BacklogComponent extends React.Component {\n  state = {\n    userId: 0,\n    description: '',\n  };\n\n  handleChange = (key, event) => {\n    this.setState({\n      [key]: event.target.value,\n    });\n  };\n\n  submitBacklog = () => {\n    const { userId, description } = this.state;\n\n    this.props.mutate({\n      mutation,\n      variables: {\n        userId,\n        description,\n      },\n      refetch: true,\n    });\n  };\n\n  renderFormComponent = () => {\n    const { userId, description } = this.state;\n    const {\n      graphql: {\n        data: { users },\n      },\n    } = this.props;\n\n    return (\n      <div style={style.formWrap}>\n        <span style={style.input}>\n          <label htmlFor=\"description\">Description</label>\n          <input\n            type=\"text\"\n            onChange={this.handleChange.bind(null, 'description')}\n            value={description}\n          />\n        </span>\n        <span style={style.input}>\n          <label htmlFor=\"description\">Assign to</label>\n          <select\n            onChange={this.handleChange.bind(null, 'userId')}\n            value={userId}\n          >\n            <option value=\"0\">Unassigned</option>\n            {users.map(u => (\n              <option key={u.id} value={u.id}>\n                {u.name}\n              </option>\n            ))}\n          </select>\n        </span>\n        <span style={style.input}>\n          <button onClick={this.submitBacklog}>Add</button>\n        </span>\n      </div>\n    );\n  };\n\n  renderTodo = () => {\n    const {\n      graphql: { data },\n    } = this.props;\n\n    return <TodoList data={data.backlogs} wrapperStyle={style.list} />;\n  };\n\n  render() {\n    const {\n      graphql: { loading },\n    } = this.props;\n\n    if (loading) {\n      return <div>Loading Backlogs...</div>;\n    }\n\n    return (\n      <div style={style.wrap}>\n        {this.renderTodo()}\n        {this.renderFormComponent()}\n      </div>\n    );\n  }\n}\n\nconst query = `\n  {\n    backlogs {\n      id\n      description\n      status\n      user {\n        name\n      }\n    }\n\n    users {\n      name\n      id\n    }\n  }\n`;\n\nconst mutation = `\n  mutation addBacklog($userId: ID!, $description: String!) {\n    addBacklog(userId: $userId, description: $description) {\n      id\n      description\n      status\n      user {\n        name\n      }\n    }\n  }\n`;\n\nexport default withClient({\n  query,\n})(BacklogComponent);\n","import React from 'react';\nimport withClient from '../gql-withgql';\n\nconst generateStyle = status => {\n  let style = { listStyleType: 'none', border: '1px solid', margin: '5px' };\n\n  if (status === 'BACKLOG') {\n    style = {\n      ...style,\n      color: 'blue',\n      borderColor: 'blue',\n    };\n  }\n\n  if (status === 'DONE') {\n    style = {\n      ...style,\n      color: 'green',\n      borderColor: 'green',\n    };\n  }\n\n  if (status === 'ON_PROGRESS') {\n    style = {\n      ...style,\n      color: 'lightblue',\n      borderColor: 'lightblue',\n    };\n  }\n\n  return style;\n};\n\nexport const ListTodoList = ({\n  data,\n  liStyle = {},\n  selectStatus,\n  updateStatus,\n}) => (\n  <li key={data.id} style={{ ...generateStyle(data.status), ...liStyle }}>\n    <p>\n      <strong>{data.description}</strong>\n    </p>\n    <select\n      onChange={e => updateStatus({ id: data.id, status: e.target.value })}\n      value={data.status}\n    >\n      <option />\n      {selectStatus.map(d => (\n        <option key={d.key} value={d.value}>\n          {d.value}\n        </option>\n      ))}\n    </select>\n    <p>{data.user.name}</p>\n  </li>\n);\n\nexport const TodoList = props => {\n  const {\n    data,\n    wrapperStyle = {},\n    liStyle = {},\n    graphql: { data: gqlData },\n    mutate,\n  } = props;\n\n  return (\n    <ul style={{ margin: 0, padding: 0, ...wrapperStyle }}>\n      {data.map(d =>\n        ListTodoList({\n          data: d,\n          liStyle,\n          selectStatus: gqlData ? gqlData.status : [],\n          updateStatus: ({ id, status }) =>\n            mutate({\n              mutation,\n              variables: { id, status },\n              refetch: true,\n            }),\n        }),\n      )}\n    </ul>\n  );\n};\n\nconst query = `\n  {\n    status {\n      key\n      value\n    }\n  }\n`;\n\nconst mutation = `\n  mutation ($id: ID!, $status: TodoStatusEnum!) {\n    updateStatus(id: $id, status: $status) {\n      id,\n      description,\n      status,\n      user {\n        name\n      }\n    }\n  }\n`;\n\nexport default withClient({ query })(TodoList);\n"],"mappings":"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","sourceRoot":""}